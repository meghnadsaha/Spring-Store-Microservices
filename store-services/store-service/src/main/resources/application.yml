# Server configs
server:
  port: 9080
  error:
    include-message: always
    include-binding-errors: always

spring:
  application.name: store
  cloud:
    # As Spring Cloud Ribbon is in maintenance mode.
    # It is recommended switching to BlockingLoadBalancerClient instead.
    loadbalancer.ribbon.enabled: false
    # Massaging provider configurations
    ## Event-driven messages Stream config
    stream:
      defaultBinder: rabbit
      default.contentType: application/json
      bindings:
        output-products:
          destination: products
          producer.required-groups: auditGroup
        output-recommendations:
          destination: recommendations
          producer.required-groups: auditGroup
        output-reviews:
          destination: reviews
          producer.required-groups: auditGroup
      kafka:
        binder:
          brokers: 127.0.0.1
          defaultBrokerPort: 9092
  rabbitmq:
    host: 127.0.0.1
    port: 5672
    username: guest
    password: guest

  security.oauth2.resourceserver:
    jwt.jwk-set-uri: ${app.auth-server}

# Service discovery configs
eureka:
  instance:
    lease-renewal-interval-in-seconds: 5
    lease-expiration-duration-in-seconds: 5
    prefer-ip-address: true
  client:
    healthcheck.enabled: true
    service-url:
      defaultZone: http://${app.eureka.user}:${app.eureka.pass}@${app.eureka.host}:8761/eureka/
    initial-instance-info-replication-interval-seconds: 5
    registry-fetch-interval-seconds: 5

ribbon:
  server-list-refresh-interval: 5000
  NF-load-balancer-ping-interval: 5

# Logging configs
logging:
  level:
    web: DEBUG
    root: INFO
    com.siriusxi.ms.store: DEBUG
    org.springframework.web.server.adapter.HttpWebHandlerAdapter: TRACE

# Application health and information management
management:
  info.git:
    enabled: true
    mode: full
  endpoints.web.exposure.include: "*"
  endpoint:
    shutdown.enabled: true
    health.show-details: "ALWAYS"

# Custom configurations
app:
  eureka:
    host: localhost
    user: mt
    pass: p
  auth-server: http://localhost:9999/.well-known/jwks.json
  product-service.host: product
  recommendation-service.host: recommendation
  review-service.host: review

# Swagger properties
api:
  common:
    version: 4.0
    title: "Springy Store μServices"
    termsOfServiceUrl: https://mohamed-taman.github.io/Springy-Store-Microservices/
    license: "MIT License"
    licenseUrl: "https://github.com/mohamed-taman/Springy-Store-Microservices/blob/master/LICENSE"

    contact:
      name: "Mohamed Taman"
      url: "https://twitter.com/_tamanm"
      email: "mohamed.taman@mail.com"
    description: |
      **Springy Store** is a conceptual simple μServices-based project using the latest
      cutting-edge technologies, to demonstrate how the store is created to be a
      cloud-native and 12-factor app agnostic.

      This project μServices are developed based on Spring Boot & Cloud framework, that implement
      **cloud-native** intuitive, **design patterns** and **best practices**.

  product-composite:
    get-composite-product:
      description: Returns a composite view of the specified product id
      notes: |
        # Normal response
        If the requested product id is found the method will return information regarding:
        1. Product information
        1. Reviews
        1. Recommendations
        1. Service Addresses
        (technical information regarding the addresses of the microservices that created the response)

        # Expected partial and error responses
        1. If no product information is found, a <b>404 - Not Found</b> error will be returned
        1. In no recommendations or reviews are found for a product, a partial response will be returned

    create-composite-product:
      description: Creates a composite product
      notes: |
        # Normal response
        The composite product information posted to the API will be splitted up and stored as separate product-info, recommendation and review entities.

        # Expected error responses
        1. If a product with the same productId as specified in the posted information already exists,
           an <b>422 - Unprocessable Entity</b> error with a "duplicate key" error message will be returned

    delete-composite-product:
      description: Deletes a product composite
      notes: |
        # Normal response
        Entities for product information, recommendations and reviews related to the specificed productId will be deleted.
        The implementation of the delete method is idempotent, i.e. it can be called several times with the same response.
        This means that a delete request of a non existing product will return <b>200 Ok</b>.

# -----------------------------------------------
# This is a docker specific profile properties
# Also profiles could be separated in its owen file
# with file name format of "application-docker.yaml"
---
spring:
  profiles: docker
  jmx.enabled: false
  rabbitmq.host: rabbitmq
  cloud:
    stream:
      kafka:
        binder:
          brokers: kafka

app:
  eureka:
    host: eureka
  auth-server: http://auth-server:9999/.well-known/jwks.json

server:
  port: 8080

---
spring:
  profiles: external-OAuth-Provider
  jmx.enabled: false
  rabbitmq.host: rabbitmq
  cloud:
    stream:
      kafka:
        binder:
          brokers: kafka

app:
  eureka:
    host: eureka
  auth-server: https://dev-taman.eu.auth0.com/.well-known/jwks.json