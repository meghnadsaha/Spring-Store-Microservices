version: '3.7' ## Latest version works with Docker Engine release 18.06.0+

services:
  # Start - Core Microservices
  ## Start - Product service definition
  ### Instance 1
  product:
    build: store-services/product-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - MANAGEMENT_HEALTH_RABBIT_ENABLED=false
      - SPRING_CLOUD_STREAM_DEFAULTBINDER=kafka
      - SPRING_CLOUD_STREAM_BINDINGS_INPUT_CONSUMER_PARTITIONED=true
      - SPRING_CLOUD_STREAM_BINDINGS_INPUT_CONSUMER_INSTANCECOUNT=2
      - SPRING_CLOUD_STREAM_BINDINGS_INPUT_CONSUMER_INSTANCEINDEX=0
    depends_on:
      - mongodb
      - kafka
  ### Instance 2
  product-i1:
    build: store-services/product-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - MANAGEMENT_HEALTH_RABBIT_ENABLED=false
      - SPRING_CLOUD_STREAM_DEFAULTBINDER=kafka
      - SPRING_CLOUD_STREAM_BINDINGS_INPUT_CONSUMER_PARTITIONED=true
      - SPRING_CLOUD_STREAM_BINDINGS_INPUT_CONSUMER_INSTANCECOUNT=2
      - SPRING_CLOUD_STREAM_BINDINGS_INPUT_CONSUMER_INSTANCEINDEX=1
    depends_on:
      - mongodb
      - kafka
  ## End - Product service definition

  ## Start - Recommendation service definition
  ### Instance 1
  recommendation:
    build: store-services/recommendation-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - MANAGEMENT_HEALTH_RABBIT_ENABLED=false
      - SPRING_CLOUD_STREAM_DEFAULTBINDER=kafka
      - SPRING_CLOUD_STREAM_BINDINGS_INPUT_CONSUMER_PARTITIONED=true
      - SPRING_CLOUD_STREAM_BINDINGS_INPUT_CONSUMER_INSTANCECOUNT=2
      - SPRING_CLOUD_STREAM_BINDINGS_INPUT_CONSUMER_INSTANCEINDEX=0
    depends_on:
      - mongodb
      - kafka
  ### Instance 2
  recommendation-i1:
    build: store-services/recommendation-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - MANAGEMENT_HEALTH_RABBIT_ENABLED=false
      - SPRING_CLOUD_STREAM_DEFAULTBINDER=kafka
      - SPRING_CLOUD_STREAM_BINDINGS_INPUT_CONSUMER_PARTITIONED=true
      - SPRING_CLOUD_STREAM_BINDINGS_INPUT_CONSUMER_INSTANCECOUNT=2
      - SPRING_CLOUD_STREAM_BINDINGS_INPUT_CONSUMER_INSTANCEINDEX=1
    depends_on:
      - mongodb
      - kafka
  ## End - Recommendation service definition

  ## Start - Review service definition
  ### Instance 1
  review:
    build: store-services/review-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - MANAGEMENT_HEALTH_RABBIT_ENABLED=false
      - SPRING_CLOUD_STREAM_DEFAULTBINDER=kafka
      - SPRING_CLOUD_STREAM_BINDINGS_INPUT_CONSUMER_PARTITIONED=true
      - SPRING_CLOUD_STREAM_BINDINGS_INPUT_CONSUMER_INSTANCECOUNT=2
      - SPRING_CLOUD_STREAM_BINDINGS_INPUT_CONSUMER_INSTANCEINDEX=0
    depends_on:
      - mysql
      - kafka
    restart: on-failure
  ### Instance 2
  review-i1:
    build: store-services/review-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - MANAGEMENT_HEALTH_RABBIT_ENABLED=false
      - SPRING_CLOUD_STREAM_DEFAULTBINDER=kafka
      - SPRING_CLOUD_STREAM_BINDINGS_INPUT_CONSUMER_PARTITIONED=true
      - SPRING_CLOUD_STREAM_BINDINGS_INPUT_CONSUMER_INSTANCECOUNT=2
      - SPRING_CLOUD_STREAM_BINDINGS_INPUT_CONSUMER_INSTANCEINDEX=1
    depends_on:
      - mysql
      - kafka
    restart: on-failure
  ## End - Review service definition

  ## Start - Store service definition
  store:
    build: store-services/store-service
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - MANAGEMENT_HEALTH_RABBIT_ENABLED=false
      - SPRING_CLOUD_STREAM_DEFAULTBINDER=kafka
      - SPRING_CLOUD_STREAM_BINDINGS_OUTPUT-PRODUCTS_PRODUCER_PARTITION-KEY-EXPRESSION=payload.key
      - SPRING_CLOUD_STREAM_BINDINGS_OUTPUT-PRODUCTS_PRODUCER_PARTITION-COUNT=2
      - SPRING_CLOUD_STREAM_BINDINGS_OUTPUT-RECOMMENDATIONS_PRODUCER_PARTITION-KEY-EXPRESSION=payload.key
      - SPRING_CLOUD_STREAM_BINDINGS_OUTPUT-RECOMMENDATIONS_PRODUCER_PARTITION-COUNT=2
      - SPRING_CLOUD_STREAM_BINDINGS_OUTPUT-REVIEWS_PRODUCER_PARTITION-KEY-EXPRESSION=payload.key
      - SPRING_CLOUD_STREAM_BINDINGS_OUTPUT-REVIEWS_PRODUCER_PARTITION-COUNT=2
    depends_on:
      - kafka
  ## End - Store service definition
  # End - Core Microservices

  # Start - Cloud Infrastructure
  ## Start - Eureka Service Discovery definition
  eureka:
    build: store-cloud-infra/eureka-server
    restart: on-failure
  ## End - Eureka Service Discovery definition

  ## Start - Edge Server definition
  gateway:
    build: store-cloud-infra/edge-server
    ports:
      - "8443:8443"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - SERVER_SSL_KEY_STORE=file:/keystore/edge.p12
      - SERVER_SSL_KEY_STORE_PASSWORD=password
    volumes:
      - $PWD/config/keystore:/keystore
    depends_on:
      - eureka
    restart: on-failure
  ## End - Edge Server definition

  ## Start - Edge Server definition
  auth-server:
    build: store-cloud-infra/authorization-server
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    depends_on:
      - eureka
    restart: on-failure
  ## End - Edge Server definition
  # End - Cloud Infrastructure

  # Start - Data and transport Infrastructure
  ## Start - mongodb database definition
  ### $ mongo
  mongodb:
    image: mongo:4.2.6-bionic
    ports:
      - "27017-27019:27017-27019"
    healthcheck:
      test: "mongo --eval 'db.stats().ok'"
      interval: 10s
      timeout: 10s
      retries: 5
      start_period: 40s
    restart: on-failure
  ## End - mongodb database definition

  ## Start - MySql database definition
  ### $ mysql -uroot -h127.0.0.1 -p
  mysql:
    image: mysql:8.0.20
    ports:
      - "3306:3306"
    environment:
      - MYSQL_ROOT_PASSWORD=rootpwd
      - MYSQL_DATABASE=review-db
      - MYSQL_USER=user
      - MYSQL_PASSWORD=pwd
      - MYSQL_ROOT_HOST=%
    healthcheck:
      test: "/usr/bin/mysql --user=user --password=pwd --execute \"SHOW DATABASES;\""
      interval: 10s
      timeout: 5s
      retries: 10
    restart: on-failure
  ## End - MySql database definition

  ## Start - Kafka Messaging service
  kafka:
    image: wurstmeister/kafka:latest
    ports:
      - "9092:9092"
    environment:
      - KAFKA_ADVERTISED_HOST_NAME=kafka
      - KAFKA_ADVERTISED_PORT=9092
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
    depends_on:
      - zookeeper
    restart: on-failure
  ## End - Kafka Messaging service

  ## Start - Zookeeper (Kafka) cluster management service
  zookeeper:
    image: wurstmeister/zookeeper:latest
    ports:
      - "2181:2181"
    environment:
      - KAFKA_ADVERTISED_HOST_NAME=zookeeper
    restart: on-failure
  ## End - Zookeeper cluster management service
  # End - Data and transport Infrastructure